name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  PROJECT_ID: test-teraform-vm
  REGION: us-central1
  CLUSTER_NAME: fastapi-gke-cluster
  CLUSTER_ZONE: us-central1-a
  REPO_NAME: fastapi-repo
  IMAGE_NAME: fastapi-cicd-demo
  IMAGE: us-central1-docker.pkg.dev/test-teraform-vm/fastapi-repo/fastapi-cicd-demo

jobs:
  # 1Ô∏è‚É£ Code Checkout and Setup
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

  # 2Ô∏è‚É£ Install Dependencies
  install:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r ../requirements.txt

  # 3Ô∏è‚É£ Run Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies and pytest
        run: |
          pip install -r requirements.txt pytest httpx
          cd app
          pytest --maxfail=1 --disable-warnings -q

  # 4Ô∏è‚É£ Run Linting
  lint:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Flake8
        run: |
          pip install flake8
          flake8 app --max-line-length=120

  # 5Ô∏è‚É£ Security Scan
  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r app || true   # <-- allows Bandit warnings but doesn't fail pipeline

  # 6Ô∏è‚É£ Build Docker Image and Push to Artifact Registry
  build-and-push:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Docker Image
        run: |
          docker build -t $IMAGE:${{ github.run_number }} .
          docker push $IMAGE:${{ github.run_number }}
          echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV

  # 7Ô∏è‚É£ Deploy to GKE
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (for kubectl)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # üëá Fix for your current error
      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.CLUSTER_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          kubectl -n fastapi-cicd-ns set image deployment/fastapi-cicd-deploy fastapi-cicd=$IMAGE:${{ github.run_number }} --record
          kubectl -n fastapi-cicd-ns rollout status deployment/fastapi-cicd-deploy --timeout=180s
          kubectl -n fastapi-cicd-ns get pods

  # 8Ô∏è‚É£ Post-Deployment Verification (Optional)
  verify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Verify Application Deployment
        run: |
          echo "Deployment verification started..."
          kubectl -n fastapi-cicd-ns get svc
          echo "‚úÖ FastAPI successfully deployed on GKE!"

