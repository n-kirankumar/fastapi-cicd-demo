name: FastAPI CI/CD Pipeline (8 Stages with Dependency)

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: fastapi-gke-project
  REGION: us-central1
  REPOSITORY: fastapi-repo
  IMAGE_NAME: fastapi-cicd-app
  CLUSTER_NAME: fastapi-gke-cluster
  NAMESPACE: fastapi-cicd-ns

jobs:
  # ----------------- 1️⃣ CODE CHECKOUT -----------------
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Verify Files
        run: echo "✅ Code checkout completed successfully."

  # ----------------- 2️⃣ INSTALL DEPENDENCIES -----------------
  install:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          echo "✅ Dependencies installed."

  # ----------------- 3️⃣ LINTING -----------------
  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Run Linter
        run: |
          pip install flake8
          flake8 . || true
          echo "✅ Linting completed."

  # ----------------- 4️⃣ SECURITY SCAN -----------------
  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Run Bandit Security Check
        run: |
          pip install bandit
          bandit -r . || true
          echo "✅ Security scan completed."

  # ----------------- 5️⃣ BUILD DOCKER IMAGE -----------------
  build:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Authenticate GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest .
          echo "✅ Docker image built successfully."

  # ----------------- 6️⃣ PUSH DOCKER IMAGE -----------------
  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Authenticate GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Push Docker Image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          echo "✅ Docker image pushed to Artifact Registry."

  # ----------------- 7️⃣ DEPLOY TO GKE -----------------
  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Authenticate GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: Deploy to GKE
        run: |
          kubectl -n ${{ env.NAMESPACE }} set image deployment/fastapi-cicd-deploy fastapi-cicd-container=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          kubectl -n ${{ env.NAMESPACE }} rollout status deployment/fastapi-cicd-deploy
          echo "✅ Deployed to GKE successfully."

  # ----------------- 8️⃣ VERIFY DEPLOYMENT -----------------
  verify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Verify Deployment
        run: |
          echo "Deployment verification started..."
          kubectl -n ${{ env.NAMESPACE }} get pods
          kubectl -n ${{ env.NAMESPACE }} get svc
          echo "✅ Deployment verification completed successfully."

