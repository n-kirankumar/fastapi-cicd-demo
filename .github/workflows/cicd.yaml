name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  PROJECT_ID: test-teraform-vm
  REGION: us-central1
  REPOSITORY: fastapi-repo
  IMAGE_NAME: fastapi-cicd-app
  CLUSTER_NAME: fastapi-gke-cluster
  NAMESPACE: fastapi-cicd-ns

jobs:
  # ---------------- STAGE 1 ----------------
  install:
    name: 1Ô∏è‚É£ Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Dependencies installed successfully."

  # ---------------- STAGE 2 ----------------
  lint:
    name: 2Ô∏è‚É£ Lint Code
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4

      - name: Install Flake8
        run: pip install flake8

      - name: Run Flake8
        run: |
          flake8 app --max-line-length=120
          echo "‚úÖ Linting passed successfully."

  # ---------------- STAGE 3 ----------------
  security:
    name: 3Ô∏è‚É£ Run Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Scan
        run: |
          bandit -r app || true
          echo "‚úÖ Bandit security scan completed."

  # ---------------- STAGE 4 ----------------
  test:
    name: 4Ô∏è‚É£ Run Unit Tests
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest

      - name: Run Pytest
        run: |
          cd app
          pytest --maxfail=1 --disable-warnings -q
          echo "‚úÖ Tests completed successfully."

  # ---------------- STAGE 5 ----------------
  build:
    name: 5Ô∏è‚É£ Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker with Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} .
          docker save -o image.tar ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          echo "‚úÖ Docker image built and saved successfully."

      - name: Upload Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-image
          path: image.tar

  # ---------------- STAGE 6 ----------------
  push:
    name: 6Ô∏è‚É£ Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi-image

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker with Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Load and Push Docker Image
        run: |
          ls -lh image.tar  # Debug check
          docker load -i image.tar
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          echo "‚úÖ Docker image pushed successfully."

  # ---------------- STAGE 7 ----------------
  deploy:
    name: 7Ô∏è‚É£ Deploy to GKE
    runs-on: ubuntu-latest
    needs: push
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "kubectl,gke-gcloud-auth-plugin"

      - name: Connect to GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}

      - name: Update Deployment Image
        run: |
          kubectl set image deployment/fastapi-cicd-deploy fastapi-cicd=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/fastapi-cicd-deploy -n ${{ env.NAMESPACE }}
          echo "‚úÖ Deployment updated successfully."

  # ---------------- STAGE 8 ----------------
  verify:
    name: 8Ô∏è‚É£ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get svc -n ${{ env.NAMESPACE }}
          echo "‚úÖ Deployment verification completed successfully."

