name: CI/CD Pipeline for FastAPI on GKE

on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: fastapi-gke-project
  REGION: us-central1
  REPOSITORY: fastapi-repo
  IMAGE_NAME: fastapi-cicd-app
  CLUSTER_NAME: fastapi-gke-cluster
  NAMESPACE: fastapi-cicd-ns

jobs:
  1Ô∏è‚É£-checkout:
    name: üß© Step 1 - Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  2Ô∏è‚É£-setup-python:
    name: üêç Step 2 - Setup Python
    runs-on: ubuntu-latest
    needs: [1Ô∏è‚É£-checkout]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  3Ô∏è‚É£-run-tests:
    name: üß™ Step 3 - Run Tests
    runs-on: ubuntu-latest
    needs: [2Ô∏è‚É£-setup-python]
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: pytest || echo "No tests found, skipping"

  4Ô∏è‚É£-build-image:
    name: üê≥ Step 4 - Build Docker Image
    runs-on: ubuntu-latest
    needs: [3Ô∏è‚É£-run-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "gke-gcloud-auth-plugin"

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} .
          docker save ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} -o image.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  5Ô∏è‚É£-push-image:
    name: üöÄ Step 5 - Push Docker Image to Artifact Registry
    runs-on: ubuntu-latest
    needs: [4Ô∏è‚É£-build-image]
    steps:
      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Load and Push Docker Image
        run: |
          docker load -i image.tar
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          echo "‚úÖ Docker image pushed successfully."

  6Ô∏è‚É£-deploy-gke:
    name: ‚ò∏Ô∏è Step 6 - Deploy to GKE
    runs-on: ubuntu-latest
    needs: [5Ô∏è‚É£-push-image]
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "gke-gcloud-auth-plugin"

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n ${{ env.NAMESPACE }}

  7Ô∏è‚É£-verify-deploy:
    name: üîç Step 7 - Verify Deployment
    runs-on: ubuntu-latest
    needs: [6Ô∏è‚É£-deploy-gke]
    steps:
      - name: Check service status
        run: kubectl -n ${{ env.NAMESPACE }} get svc

  8Ô∏è‚É£-cleanup:
    name: üßπ Step 8 - Cleanup (Optional)
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup workspace
        run: rm -rf *

