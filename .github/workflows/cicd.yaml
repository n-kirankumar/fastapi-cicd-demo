name: Complete 8-stage CI/CD Pipeline for FastAPI on GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: test-teraform-vm
  REGION: us-central1
  REPO_NAME: fastapi-repo
  IMAGE_NAME: fastapi-cicd-demo
  CLUSTER_NAME: fastapi-gke-cluster
  CLUSTER_ZONE: us-central1-a

jobs:
  # 1️⃣ Checkout
  checkout:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.repo.outputs.repo || '' }}
    steps:
      - name: Checkout code
        id: repo
        uses: actions/checkout@v4

  # 2️⃣ Setup Python (install base deps)
  setup-python:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  # 3️⃣ Lint (flake8)
  lint:
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - uses: actions/checkout@v4
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        run: flake8 app --max-line-length=120

  # 4️⃣ Security scan (Bandit)
  bandit:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Install bandit
        run: pip install bandit
      - name: Run Bandit
        run: bandit -r app

  # 5️⃣ Unit tests (pytest)
  test:
    runs-on: ubuntu-latest
    needs: bandit
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python for tests
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install test deps
        run: |
          pip install -r requirements.txt
          pip install pytest
      - name: Run pytest (inside app/)
        run: |
          cd app
          pytest --maxfail=1 --disable-warnings -q

  # 6️⃣ Build & Push Docker image (authenticate BEFORE pushing)
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (using service account key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet

      - name: Build and push Docker image to Artifact Registry
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        run: |
          echo "Building image: $IMAGE"
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

  # 7️⃣ Deploy to GKE
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (for kubectl)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_ID }}

      - name: Update image in deployment and rollout
        run: |
          # IMAGE was written to GITHUB_ENV in previous job
          kubectl -n fastapi-cicd-ns set image deployment/fastapi-cicd-deploy fastapi-cicd=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} --record
          kubectl -n fastapi-cicd-ns rollout status deployment/fastapi-cicd-deploy --timeout=180s

  # 8️⃣ Verify deployment (smoke test)
  verify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Get service external IP and curl
        run: |
          # wait for external IP
          EXTERNAL_IP=""
          for i in $(seq 1 12); do
            EXTERNAL_IP=$(kubectl get svc fastapi-cicd-deploy -n fastapi-cicd-ns -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$EXTERNAL_IP" ]; then break; fi
            echo "waiting for external-ip..."
            sleep 10
          done
          echo "external ip: $EXTERNAL_IP"
          if [ -z "$EXTERNAL_IP" ]; then
            echo "No external IP assigned - failing verification"
            kubectl get svc -n fastapi-cicd-ns
            exit 1
          fi
          curl --fail --retry 5 --retry-delay 3 http://$EXTERNAL_IP || (echo "smoke-test failed" && exit 1)

